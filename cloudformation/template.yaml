AWSTemplateFormatVersion: 2010-09-09
Description: CodeDeploy + AutoScaling (LaunchTemplate) without ALB. Creates VPC, public subnets, ASG(2), S3 bucket, GitHub OIDC role, CodeDeploy app+group.

# ----------------------------
# Parameters
# ----------------------------
Parameters:
  VpcCIDR:
    Type: String
    Default: 10.192.0.0/16
    Description: CIDR for VPC
  PublicSubnet1CIDR:
    Type: String
    Default: 10.192.10.0/24
  PublicSubnet2CIDR:
    Type: String
    Default: 10.192.11.0/24
  PrivateSubnet1CIDR:
    Type: String
    Default: 10.192.20.0/24
  PrivateSubnet2CIDR:
    Type: String
    Default: 10.192.21.0/24

  ImageId:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"
    Description: Amazon Linux 2 AMI
  InstanceType:
    Type: String
    Default: t2.micro
    AllowedValues: [t2.micro, t3.micro, t3.small, t3.medium]

  AutoScalingGroupMinSize:
    Type: Number
    Default: 2
  AutoScalingGroupMaxSize:
    Type: Number
    Default: 2
  AutoScalingGroupDesiredCapacity:
    Type: Number
    Default: 2

  ThumbprintList:
    Type: String
    Default: 6938fd4d98bab03faadb97b34396831e3780aea1
    Description: SHA1 thumbprint for GitHub OIDC (token.actions.githubusercontent.com)
  GithubRepoName:
    Type: String
    Description: GitHub repository in the form owner/repo (e.g., TestUser/TestCodeDeploy)

# ----------------------------
# Networking
# ----------------------------
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  IGWAttach:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags: [{ Key: Name, Value: Public Subnet (AZ1) }]

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [1, !GetAZs ""]
      Tags: [{ Key: Name, Value: Public Subnet (AZ2) }]

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags: [{ Key: Name, Value: Private Subnet (AZ1) }]

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [1, !GetAZs ""]
      Tags: [{ Key: Name, Value: Private Subnet (AZ2) }]

  PublicRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: IGWAttach
    Properties:
      RouteTableId: !Ref PublicRT
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  AssocPub1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRT

  AssocPub2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRT

# ----------------------------
# Security Group (port 8080 open to Internet)
# ----------------------------
  WebAppSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP 8080 from Internet
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

# ----------------------------
# S3 bucket for CodeDeploy revision
# ----------------------------
  WebappDeploymentBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault: { SSEAlgorithm: AES256 }
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

# ----------------------------
# IAM: EC2 role for CodeDeploy agent + SSM + S3 read
# ----------------------------
  WebappRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: { Service: ["ec2.amazonaws.com"] }
            Action: ["sts:AssumeRole"]
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: AllowReadDeploymentBucket
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: ["s3:GetObject","s3:ListBucket"]
                Resource:
                  - !GetAtt WebappDeploymentBucket.Arn
                  - !Sub "${WebappDeploymentBucket.Arn}/*"

  WebappInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles: [!Ref WebappRole]
      Path: "/"

# ----------------------------
# GitHub OIDC provider + Role for Actions
# ----------------------------
  IDCProvider:
    Type: AWS::IAM::OIDCProvider
    Properties:
      Url: "https://token.actions.githubusercontent.com"
      ClientIdList: ["sts.amazonaws.com"]
      ThumbprintList: [!Ref ThumbprintList]

  GitHubIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CodeDeployRoleforGitHub
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: { Federated: !Ref IDCProvider }
            Action: "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringLike:
                token.actions.githubusercontent.com:sub: !Sub "repo:${GithubRepoName}:*"
      Policies:
        - PolicyName: CodeDeployFromGitHub
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - codedeploy:Get*
                  - codedeploy:Batch*
                  - codedeploy:List*
                  - codedeploy:CreateDeployment
                  - codedeploy:RegisterApplicationRevision
                Resource: !Sub "arn:${AWS::Partition}:codedeploy:*:${AWS::AccountId}:*"
              - Effect: Allow
                Action: [ "s3:PutObject", "s3:AbortMultipartUpload", "s3:ListBucket", "s3:GetBucketLocation" ]
                Resource:
                  - !GetAtt WebappDeploymentBucket.Arn
                  - !Sub "${WebappDeploymentBucket.Arn}/*"

# ----------------------------
# Launch Template (installs Tomcat + CodeDeploy agent)
# ----------------------------
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: !Ref ImageId
        InstanceType: !Ref InstanceType
        SecurityGroupIds: [!Ref WebAppSG]
        IamInstanceProfile: { Name: !Ref WebappInstanceProfile }
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            set -eux
            yum update -y
            yum install -y java-1.8.0-openjdk-devel wget unzip ruby
            # Install Tomcat 9
            cd /usr/local
            wget -q https://archive.apache.org/dist/tomcat/tomcat-9/v9.0.43/bin/apache-tomcat-9.0.43.zip
            unzip -q apache-tomcat-9.0.43.zip
            mv apache-tomcat-9.0.43 tomcat9
            cat >/etc/systemd/system/tomcat.service <<'EOF'
            [Unit]
            Description=Apache Tomcat 9
            After=network.target
            [Service]
            Type=forking
            User=nobody
            Group=nobody
            Environment=CATALINA_HOME=/usr/local/tomcat9
            Environment=CATALINA_BASE=/usr/local/tomcat9
            ExecStart=/usr/local/tomcat9/bin/catalina.sh start
            ExecStop=/usr/local/tomcat9/bin/catalina.sh stop
            Restart=always
            [Install]
            WantedBy=multi-user.target
            EOF
            chmod +x /usr/local/tomcat9/bin/*.sh
            systemctl daemon-reload
            systemctl enable --now tomcat

            # Install CodeDeploy agent
            cd /home/ec2-user
            wget -q https://aws-codedeploy-${AWS::Region}.s3.${AWS::Region}.amazonaws.com/latest/install
            chmod +x ./install
            ./install auto

            # SSM Agent (usually preinstalled on AL2, keep to be sure)
            yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm || true
            systemctl enable --now amazon-ssm-agent

# ----------------------------
# Auto Scaling Group (Public Subnets, no ALB)
# ----------------------------
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: [!Ref PublicSubnet1, !Ref PublicSubnet2]
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: !Ref AutoScalingGroupMinSize
      MaxSize: !Ref AutoScalingGroupMaxSize
      DesiredCapacity: !Ref AutoScalingGroupDesiredCapacity
      HealthCheckType: EC2
      HealthCheckGracePeriod: 300
      Tags:
        - Key: Name
          Value: webapp-example
          PropagateAtLaunch: true

# ----------------------------
# CodeDeploy Application & Deployment Group (no traffic control)
# ----------------------------
  WebappApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: CodeDeployAppNameWithASG
      ComputePlatform: Server

  CodeDeployRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: { Service: ["codedeploy.amazonaws.com"] }
            Action: ["sts:AssumeRole"]
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole

  DeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref WebappApplication
      DeploymentGroupName: CodeDeployGroupName
      ServiceRoleArn: !GetAtt CodeDeployRole.Arn
      AutoScalingGroups: [!Ref AutoScalingGroup]
      DeploymentStyle:
        DeploymentType: IN_PLACE
        DeploymentOption: WITHOUT_TRAFFIC_CONTROL
      AutoRollbackConfiguration:
        Enabled: true
        Events: [DEPLOYMENT_FAILURE, DEPLOYMENT_STOP_ON_REQUEST]

# ----------------------------
# Outputs (as your doc expects)
# ----------------------------
Outputs:
  ApplicationName:
    Description: CodeDeploy Application name
    Value: !Ref WebappApplication
  DeploymentGroup:
    Description: Webapp Deployment Group
    Value: !Ref DeploymentGroup
  DeploymentBucket:
    Description: Deployment S3 bucket name
    Value: !Ref WebappDeploymentBucket
  GitHubIAMRoleArn:
    Description: IAM role for GitHub OIDC
    Value: !GetAtt GitHubIAMRole.Arn
  PublicIPNote:
    Description: After deployment, open http://<instance-public-ip>:8080/<your-app>/
    Value: Use each instance public IP on port 8080
